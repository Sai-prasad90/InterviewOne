
 Core Java Concepts
1. What is Java? Explain its key features.
2. Differentiate between JDK, JRE, and JVM.
3. What are the primitive data types in Java?
4. Explain the difference between `int` and `Integer` in Java.
5. Describe the main principles of Object-Oriented Programming (OOP).
6. What is the difference between abstraction and encapsulation?
7. Explain the concept of inheritance in Java.
8. What is method overriding? Provide an example.
9. What are access modifiers in Java?
10. What is the difference between `ArrayList` and `LinkedList`?

 Java Collections Framework
1. Explain the hierarchy of Java Collections Framework.
2. Describe the difference between `HashSet` and `TreeSet`.
3. What is the purpose of `Map` interface in Java?
4. Differentiate between `ArrayList` and `Vector`.
5. Explain the role of `Comparator` and `Comparable` interfaces.
6. How does `HashMap` work internally?
7. What is the difference between `Arrays` and `Collections` in Java?
8. Explain the purpose of `ConcurrentHashMap`.
9. What is the difference between `Set` and `List`?
10. How does the enhanced for loop work with collections?

 Java Multithreading
1. What is a thread? How is it different from a process?
2. Explain the life cycle of a thread in Java.
3. What is synchronization? Why is it important?
4. How do you achieve synchronization in Java?
5. Explain the difference between `wait()` and `sleep()` methods.
6. Describe the use of `volatile` keyword in Java.
7. What are the advantages of multithreading in Java?
8. How do you create a thread in Java?
9. What are thread pools? Explain their significance.
10. What is deadlock? How can you avoid it?

 Exception Handling
1. What is an exception in Java?
2. Explain the difference between checked and unchecked exceptions.
3. How do you handle exceptions in Java?
4. What is the purpose of `finally` block?
5. Explain the use of `try-with-resources` statement.
6. Describe the difference between `throw` and `throws` keywords.
7. How do you create custom exceptions in Java?
8. What is the `NullPointerException`? How can you avoid it?
9. How does exception propagation work in Java?
10. What is the difference between `Error` and `Exception`?

 Java I/O 
1. How do you read and write data in Java?
2. Explain the difference between `Reader` and `InputStream`.
3. What are the main classes used for file handling in Java?
4. How do you serialize and deserialize objects in Java?
5. Describe the purpose of `BufferedReader` and `BufferedWriter`.
6. What is the purpose of `DataInputStream` and `DataOutputStream`?
7. Explain the use of `ObjectInputStream` and `ObjectOutputStream`.
8. How do you read and write text files in Java?
9. What is the purpose of `RandomAccessFile`?
10. Describe the difference between character stream and byte stream.

 Java Memory Management 
1. How does Java manage memory?
2. Explain the purpose of the Java garbage collector.
3. What are memory leaks in Java? How can they be prevented?
4. Describe the difference between stack and heap memory.
5. What is the purpose of `finalize()` method?
6. How do you analyze memory usage in Java applications?
7. Explain the concept of young generation and old generation in heap.
8. What are the different types of garbage collectors in Java?
9. How can you optimize memory usage in Java applications?
10. Describe the purpose of `WeakReference` and `SoftReference` classes.

 Advanced Java Concepts 
1. Explain the purpose of Java annotations.
2. What is reflection in Java? How is it used?
3. Describe the use of `enum` types in Java.
4. What are lambda expressions? How do you use them?
5. How do you create and use custom annotations in Java?
6. Explain the purpose of `java.lang.Class` class.
7. What is the difference between static and non-static nested classes?
8. Describe the use of `ClassLoader` in Java.
9. How do you handle date and time in Java?
10. What are the design patterns used in Java?
   
 Spring Framework
1. What is inversion of control (IoC)?
2. Describe the modules of the Spring framework.
3. What is dependency injection (DI) in Spring?
4. Explain the difference between Spring MVC and Spring Boot.
5. How do you configure Spring Beans?
6. What is AOP (Aspect-Oriented Programming) in Spring?
7. Describe the purpose of Spring Data JPA.
8. What are the different types of bean scopes in Spring?
9. How do you implement security in Spring applications?
10. What is the purpose of Spring Boot Actuator?

 Hibernate 
1. Explain the purpose of Hibernate framework.
2. What are the main features of Hibernate?
3. How do you configure Hibernate in a Java application?
4. What is an ORM (Object-Relational Mapping)?
5. Describe the difference between `save()` and `persist()` methods in Hibernate.
6. How do you perform CRUD operations using Hibernate?
7. What are the different types of associations in Hibernate?
8. How do you implement caching in Hibernate?
9. What is lazy loading in Hibernate?
10. Explain the use of HQL (Hibernate Query Language).

 JDBC
1. What is JDBC (Java Database Connectivity)?
2. How do you establish a connection to a database using JDBC?
3. Explain the difference between `Statement` and `PreparedStatement`.
4. How do you execute stored procedures in JDBC?
5. Describe the purpose of `ResultSet` interface.
6. How do you handle transactions in JDBC?
7. What are the different types of JDBC drivers?
8. Explain the use of `Batch Processing` in JDBC.
9. How do you handle exceptions in JDBC?
10. What is connection pooling? How do you implement it in JDBC?

 Design Patterns 
1. What are design patterns? Why are they used?
2. Explain the Singleton design pattern.
3. Describe the Factory design pattern and its advantages.
4. What is the Observer design pattern?
5. How does the MVC (Model-View-Controller) pattern work?
6. Explain the Builder design pattern.
7. What is the difference between Factory and Abstract Factory patterns?
8. Describe the Adapter design pattern.
9. Explain the Prototype design pattern.
10. How do you implement the Strategy design pattern in Java?

 Testing in Java
1. What is JUnit? How do you use it for testing?
2. Explain the purpose of TestNG framework.
3. How do you mock objects in Java for testing?
4. What is integration testing? How do you perform it in Java?
5. Describe the purpose of Mockito framework.
6.

 How do you write parameterized tests in JUnit?
7. Explain the concept of code coverage in testing.
8. What is the purpose of `@Before` and `@After` annotations in testing?
9. How do you perform performance testing in Java?
10. What is the use of Selenium WebDriver in Java?

 Java Web Development 
1. What is Servlet? How do you create a Servlet in Java?
2. Explain the role of `web.xml` in Java web applications.
3. How do you handle sessions in Servlets?
4. Describe the purpose of JSP (JavaServer Pages).
5. What is the difference between forward and sendRedirect in Servlets?
6. Explain the MVC architecture for web applications.
7. How do you use filters in Java web applications?
8. What is the purpose of `ServletContext` in Servlets?
9. Describe the role of listeners in Java web applications.
10. How do you handle form data in Servlets?

 Java EE 
1. What is Java EE (Enterprise Edition)?
2. Describe the main components of Java EE.
3. Explain the purpose of EJB (Enterprise JavaBeans).
4. What are the different types of EJBs?
5. How do you implement transactions in Java EE applications?
6. Describe the purpose of JPA (Java Persistence API).
7. What is JMS (Java Message Service)?
8. How do you implement security in Java EE applications?
9. Explain the use of Servlet containers like Tomcat and Jetty.
10. What are the advantages of using Java EE for enterprise applications?

 Miscellaneous 
1. What is the difference between `==` and `.equals()` in Java?
2. How do you handle concurrent modification exceptions in Java?
3. Describe the purpose of `java.lang.Math` class.
4. What is the difference between `String` and `StringBuilder`?
5. Explain the purpose of `assert` statement in Java.
6. How do you generate random numbers in Java?
7. Describe the use of `java.util.concurrent` package.
8. How do you sort elements in a collection in Java?
9. What is the purpose of `java.lang.System` class?
10. How do you handle JSON data in Java applications?

